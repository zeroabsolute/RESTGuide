openapi: "3.0.0"

info:
  description: "An opinionated guide on how to build a RESTful API"
  version: "1.0.0"
  title: "RESTGuide"

servers:
  - url: http://localhost:{port}/{base_path}
    description: Local development server
    variables:
      port:
        default: "5000"
      base_path:
        default: "api/v1"

paths:
  /health:
    get:
      tags:
        - Health
      summary: Get server status
      responses:
        200:
          description: Server OK.
          content:
            application/json:
              schema:
                properties:
                  appName:
                    type: string
                    example: "RESTGuide"
                  version:
                    type: string
                    example: "1.0.0"
                  status:
                    type: string
                    example: "OK"
  /books:
    post:
      security:
        - bearerAuth: []
      tags:
        - Books
      summary: Create book (Admin only)
      description: Adds a new book.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - title
                - author
                - pages
                - genre
                - publications
              properties:
                title:
                  type: string
                author:
                  type: string
                pages:
                  type: integer
                  minimum: 1
                genre:
                  type: string
                publications:
                  type: array
                  items:
                    type: string
                    format: date
      responses:
        201:
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        500:
          $ref: "#/components/responses/500"
    get:
      security:
        - bearerAuth: []
      tags:
        - Books
      summary: Read books
      description: Reads books. Supports search by genre and projected responses.
      parameters:
        - name: genre
          in: query
          description: Genre
          schema:
            type: string
          example: "dystopian_fiction"
        - name: fields
          in: query
          description: Projected fields
          schema:
            type: string
          example: "firstName,lastName,genres"
      responses:
        200:
          description: Books read successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        500:
          $ref: "#/components/responses/500"
  /books/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Books
      summary: Read one book
      description: Reads one book by Id.
      parameters:
        - name: id
          in: path
          description: Book Id
          schema:
            type: string
          required: true
      responses:
        200:
          description: Book read successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Book"
                properties:
                  author:
                    allOf:
                      - $ref: "#/components/schemas/Author"
        401:
          $ref: "#/components/responses/401"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    patch:
      security:
        - bearerAuth: []
      tags:
        - Books
      summary: Update book (Admin only)
      description: Updates an existing book.
      parameters:
        - name: id
          in: path
          description: Book Id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                author:
                  type: string
                pages:
                  type: integer
                  minimum: 1
                genre:
                  type: string
                publications:
                  type: array
                  items:
                    type: string
                    format: date
      responses:
        204:
          description: Book updated successfully.
        400:
          $ref: "#/components/responses/400"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Books
      summary: Delete book (Admin only)
      description: Deletes an existing book.
      parameters:
        - name: id
          in: path
          description: Book Id
          schema:
            type: string
          required: true
      responses:
        204:
          description: Book deleted successfully.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /books/{id}/images/bulk:
    post:
      security:
        - bearerAuth: []
      tags:
        - Books
      summary: Add book images (Admin only)
      description: Uplaod images for one book.
      parameters:
        - name: id
          in: path
          description: Book Id
          schema:
            type: string
          required: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Images uploaded successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    status:
                      type: string
                      enum: ["SUCCESS", "ERROR"]
                    result:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: Only if the upload succeeded
                        name:
                          type: string
                        url:
                          type: string
                          format: uri
                          description: Only if the upload succeeded
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"
  /books/{book_id}/images/{image_id}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Books
      summary: Delete book image (Admin only)
      description: Delete an image from a book.
      parameters:
        - name: book_id
          in: path
          description: Book Id
          schema:
            type: string
          required: true
        - name: image_id
          in: path
          description: Image Id
          schema:
            type: string
          required: true
      responses:
        204:
          description: Image deleted successfully.
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          $ref: "#/components/responses/404"
        500:
          $ref: "#/components/responses/500"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      properties:
        code:
          type: string
          description: Debug Id
        name:
          type: string
          description: A human-readable error name
        message:
          type: string
          description: A human-readable error message
        details:
          oneOf:
            - type: string
              description: A more specific human-readable error message
            - type: object
              description: A more specific human-readable error message together with some details
            - type: array
              description: An array with issues from multiple fields (e.g. input validation)
    Book:
      properties:
        _id:
          type: string
        title:
          type: string
        author:
          type: string
        pages:
          type: integer
        genre:
          type: string
        publications:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              date:
                type: string
                format: date
        images:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              name:
                type: string
              url:
                type: string
                format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  responses:
    400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: ckgjkxvgl000431pp4xlpew2g
            name: Bad Request
            message: Your request contains invalid or missing data
            details:
              [
                {
                  message: '"{fieldName}" must be a valid {fieldType}',
                  path: ["{pathToField}"],
                },
              ]
    401:
      description: Not Authenticated
      content:
        text/plain:
          schema:
            type: string
            example: "Unauthorized"
    403:
      description: Not Authorized / Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: ckgjkxvgl000431pp4xlpew2g
            name: Not Authorized / Forbidden
            message: Your request cannot be completed due to missing permissions
    404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: ckgjkxvgl000431pp4xlpew2g
            name: Not Found
            message: The requested item was not found
    422:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: ckgjkxvgl000431pp4xlpew2g
            name: Unprocessable Entity
            message: Your request was understood but could not be completed due to semantic errors
    500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: ckgjkxvgl000431pp4xlpew2g
            name: Internal Server Error
            message: Operation cannot be completed due to a problem
  parameters:
    skip:
      name: skip
      in: query
      description: Number of records to skip (for pagination)
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: Page size (for pagination)
      schema:
        type: string

  examples:
    UserNotFound:
      value:
        code: ckgjkxvgl000431pp4xlpew2g
        name: Not Found
        message: The requested item was not found
        details: The requested user does not exist in our database
      summary: User not found
